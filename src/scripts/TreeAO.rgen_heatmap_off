#version 460
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_ARB_shader_clock : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require
// #extension GL_EXT_debug_printf : enable

#include "Random.glsl"
#include "RayPayload.glsl"
#include "UniformBufferObject.glsl"

#define HEATMAP_FUNCTIONALITY 0

layout(binding = 0, set = 0) uniform accelerationStructureEXT Scene;
layout(binding = 1, rgba32f) uniform image2D AccumulationImage;
layout(binding = 2, rgba8) uniform image2D OutputImage;
layout(binding = 3) readonly uniform UniformBufferObjectStruct { UniformBufferObject Camera; };
layout(binding = 12) buffer TimingsArray { uint64_t Timings[]; };

layout(location = 0) rayPayloadEXT RayPayload Ray;


void main() 
{
	#if HEATMAP_FUNCTIONALITY
	const uint64_t start_clock = Camera.ShowHeatmap ? clockARB() : 0;
	#endif

	// Initialise separate random seeds for the pixel and the rays.
	// - pixel: we want the same random seed for each pixel to get a homogeneous anti-aliasing.
	// - ray: we want a noisy random seed, different for each pixel.
	uint pixelRandomSeed = Camera.RandomSeed;
	Ray.RandomSeed = InitRandomSeed(InitRandomSeed(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y), Camera.TotalNumberOfSamples);

	vec3 pixelColor = vec3(0);

	// Accumulate all the rays for this pixels. (SPP)
	for (uint s = 0; s < Camera.NumberOfSamples; ++s)
	{
		const vec2 pixel = vec2(gl_LaunchIDEXT.x + RandomFloat(pixelRandomSeed), gl_LaunchIDEXT.y + RandomFloat(pixelRandomSeed));
		const vec2 uv = (pixel / gl_LaunchSizeEXT.xy) * 2.0 - 1.0;

		vec2 offset = Camera.Aperture/2 * RandomInUnitDisk(Ray.RandomSeed);
		vec4 origin = Camera.ModelViewInverse * vec4(offset, 0, 1);
		vec4 target = Camera.ProjectionInverse * (vec4(uv.x, uv.y, 1, 1));
		vec4 direction = Camera.ModelViewInverse * vec4(normalize(target.xyz * Camera.FocusDistance - vec3(offset, 0)), 0);

		vec3 hitColor = vec3(0, 0, 0);

        const float tMin = 0.001;
        const float tMax = 10000.0;
    
        // Trace primary ray
        traceRayEXT(
            Scene, gl_RayFlagsOpaqueEXT, 0xff, 
            0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/, 
            origin.xyz, tMin, direction.xyz, tMax, 0 /*payload*/);
			
		hitColor = Ray.ColorAndDistance.rgb;
		const float t = Ray.ColorAndDistance.w;

        // Trace missed
		if (t < 0) {
			pixelColor += hitColor;
			continue;
		}
        
        // Trace 16 AO rays
		vec3 intersectionPoint = Ray.ScatterDirection.xyz;
		for (uint j = 0; j < Camera.NumberOfShadows; j++) {
			const float shadowScale = 0.9;
            const float AODist = 10.0;

            vec3 shadowDirection = RandomInUnitSphere(Ray.RandomSeed);
			shadowDirection = normalize(shadowDirection);

			if (dot(shadowDirection, Ray.SurfaceNormal) <= 0)
				shadowDirection = -1.0f * shadowDirection;

			vec3 intersectionOrigin = intersectionPoint + shadowDirection * 0.01;

			// t >= 0 to trace shadow ray, set to t = -1 on miss
            // Use AODist as tMax
			traceRayEXT(Scene, gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT, 0xff, 
			0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/, 
			intersectionOrigin, tMin, shadowDirection, AODist, 0 /*payload*/);

			const float occluded = Ray.ColorAndDistance.w;

			// Found occlusion
			if (occluded > 0) {
				hitColor *= shadowScale;
			}
		}

		pixelColor += hitColor;
	}

	const bool accumulate = Camera.NumberOfSamples != Camera.TotalNumberOfSamples;
	const vec3 accumulatedColor = (accumulate ? imageLoad(AccumulationImage, ivec2(gl_LaunchIDEXT.xy)) : vec4(0)).rgb + pixelColor;

	pixelColor = accumulatedColor / Camera.TotalNumberOfSamples;

	// Apply raytracing-in-one-weekend gamma correction.
	#if HEATMAP_FUNCTIONALITY
	const uint64_t end_clock = Camera.ShowHeatmap ? clockARB() : 0;

	const uint64_t delta_clock = (end_clock - start_clock);
	
	if (Timings[Camera.Width*Camera.Height+1] <= 24) {
		Timings[gl_LaunchIDEXT.x + Camera.Width*gl_LaunchIDEXT.y] = delta_clock;

		for (int i = 1; i < Camera.Width * Camera.Height; i++) {
			if (Timings[i] > Timings[Camera.Width*Camera.Height]) {
				Timings[Camera.Width*Camera.Height] = Timings[i];
				Timings[Camera.Width*Camera.Height+1] += 1;
			}
		}
	}

	// float heatmap_scale = Camera.HeatmapScale * 1000000;
	// float heatmap_scale = 500000;
	// float dt_scaled = float(delta_clock) / heatmap_scale;
	float dt_scaled = float(delta_clock) / (float(Timings[Camera.Width*Camera.Height]) * 1.1f);
	float dt_clamped = clamp(dt_scaled, 0.0f, 1.0f);

	// Apply raytracing-in-one-weekend gamma correction.
	// pixelColor = Camera.ShowHeatmap ? heatmap_visual(dt_clamped) : sqrt(pixelColor);
	pixelColor = Timings[0] == 0 ? vec3(0.0f, 1.0f, 1.0f) : heatmap_visual(dt_clamped);
	#else
	pixelColor = sqrt(pixelColor);
	#endif

	imageStore(AccumulationImage, ivec2(gl_LaunchIDEXT.xy), vec4(accumulatedColor, 0));
    
	// if (gl_LaunchIDEXT.x >= 0 && gl_LaunchIDEXT.x < 20)
	// 	debugPrintfEXT("[%d, %d] rgba(%f, %f, %f)\n", gl_LaunchIDEXT.x, gl_LaunchIDEXT.y, pixelColor.x, pixelColor.y, pixelColor.z);
	imageStore(OutputImage, ivec2(gl_LaunchIDEXT.xy), vec4(pixelColor, 0));
}
